import logging
import os
# import shutil
import datetime

# RuKassa
import requests
import json
import time
import random

from tokenholder import tgtoken
# import debug

import aiogram
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = tgtoken

admin_users = [] #Put here a

# globals of input and keyboards
global keytime, paytype, payment_url, check_order_id, price, timer
global keyboard, keyboardinstr, keyboardback, keyboardpay, keyboardtime, keyboardcheck, keyboarddebug
storage = MemoryStorage()

# Configure logging
logging.basicConfig(level=logging.INFO, filename="logs.log", filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")

# Initialize bot and dispatcher

bot = aiogram.Bot(token=API_TOKEN)
dp = aiogram.Dispatcher(bot, storage=MemoryStorage())


# Initialize states
class Form(StatesGroup):
    main = State()
    instr = State()
    time = State()
    payment = State()
    checkpay = State()
    finish = State()
    debug1 = State()
    debug2 = State()
    removedebug = State()
    namedel = State()
    outlinekeyget = State()
    freerepost = State()
    freerepostgot = State()


paymenttime = {
    '15 –¥–Ω–µ–π - 100 —Ä—É–±–ª–µ–π': 100,
    '1 –º–µ—Å—è—Ü - 150 —Ä—É–±–ª–µ–π': 150,
    '3 –º–µ—Å—è—Ü–∞ - 400 —Ä—É–±–ª–µ–π': 400,
    '6 –º–µ—Å—è—Ü–µ–≤ - 750 —Ä—É–±–ª–µ–π': 750,
    '1 –≥–æ–¥ - 1450 —Ä—É–±–ª–µ–π': 1450
}
timetype = {
    100: 15,
    150: 30,
    400: 90,
    750: 180,
    1450: 365,

}


# Payment part
async def paymentdef(price):
    global payment_url, check_order_id, timer
    timer = timetype[price]
    token = '' #RuKassa API token
    order_id = str(int(time.time())) + str(random.randint(10000, 99999))
    amount = price
    params = {
        'param1': '',
        'param2': '',
        'param3': ''
    }

    data = {
        'shop_id': '',  # ID of your merchant
        'token': token,
        'order_id': order_id,
        'amount': amount,
        'data': json.dumps(params)
    }

    url = 'https://lk.rukassa.pro/api/v1/create'

    # –í—ã–ø–æ–ª–Ω—è–µ–º HTTP POST-–∑–∞–ø—Ä–æ—Å
    response = requests.post(url, data=data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
    if response.status_code == 200:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç
        result = response.json()
        print(result)
        payment_url = result['url']
        check_order_id = result['id']
        return 'Success'
    else:
        return f"{response.status_code}"


# Check for payment
async def paymentcheck():
    token = '' #RuKassa API token
    data = {
        'id': check_order_id,
        'shop_id': '',  # ID of your merchant
        'token': token
    }

    url = 'https://lk.rukassa.pro/api/v1/getPayInfo'

    # –í—ã–ø–æ–ª–Ω—è–µ–º HTTP POST-–∑–∞–ø—Ä–æ—Å
    response = requests.post(url, data=data)
    print(data)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
    if response.status_code == 200:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON-–æ—Ç–≤–µ—Ç
        result = response.json()
        print(result)
        return str(result['status'])
    else:
        result = response.json()
        print(result)
        return str(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")


# create key
async def create_key(idcustom):
    # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É shell —Å–∫—Ä–∏–ø—Ç—É
    script_path = "/home/ubuntu/VPNbot/wireguard-install-bot.sh"
    # –í–∞—à –≤–≤–æ–¥
    user_input = "1"
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤–≤–æ–¥
    print('Starting script...')

    # –°–æ–∑–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º sudo –∏ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤–≤–æ–¥–∞ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    command = f'echo -n "{user_input}" | sudo -S {script_path}'

    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
    os.system(command)

    document = open('/home/ubuntu/VPNbot/clients/temp.txt', 'r')
    number = document.readline().rstrip('\n')
    document.close()
    print(f'name with users = {number}')
    keypath = '/home/ubuntu/VPNbot/clients/' + str(number) + '.conf'
    print(f'key path = {keypath}')
    with open(keypath, 'r') as file:
        await bot.send_document(idcustom, file, caption=f'–í–∞—à –ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è VPN –Ω–∞ –æ—Å–Ω–æ–≤–µ Woreguard!'
                                                        f'\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∞—à VPN -'
                                                        f'\n–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é', reply_markup=keyboard)
    await outlinekey(idcustom)


async def outlinekey(idcustom):
    global timer
    await bot.send_message(idcustom, text=f'–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–ª—é—á–µ–π Outline –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Ä—É—á–Ω—É—é,'
                                          f'\n–º—ã —É–∂–µ —É–≤–∏–¥–µ–ª–∏ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–ª—é—á, –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –µ–≥–æ –ø—Ä–∏—à–ª–µ–º',
                           reply_markup=keyboard)
    await bot.send_message(1074578256, f'OUTLINE –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {id}, TIME={timer}')


async def adduser_json(idcustom, timer):
    print(idcustom, timer)
    end_date = datetime.date.today() + datetime.timedelta(days=timer)
    print(f'End date = {end_date}')
    dumper = {"userid": (idcustom), "id": int(open('/etc/wireguard/VPNBOT/usercounter.var', 'r').read()),
              "time": str(end_date).replace("-", "")}
    with open(f'{os.getcwd()}/users.json', 'r') as users:
        data = json.load(users)

    # convert data to list if not
    if type(data) is dict:
        data = [data]

    # append new item to data lit
    data.append(dumper)

    # write list to file
    with open(f'{os.getcwd()}/users.json', 'w') as users:
        json.dump(data, users, indent=4)


async def delete_key(idcustom):
    import os

    # –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É shell —Å–∫—Ä–∏–ø—Ç—É
    script_path = "/home/ubuntu/VPNbot/wireguard-install-bot.sh"
    user_input = '3'
    # –í—ã–∑—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞ –≤ —Ñ–∞–π–ª
    os.system(f'echo -n "{user_input}" | sudo -S {script_path}> output.txt')

    # –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ —Å –≤—ã–≤–æ–¥–æ–º
    with open("output.txt", "r") as output_file:
        output = output_file.read()
    await bot.send_message(idcustom, output)
    await Form.namedel.set()

    @dp.message_handler(state=Form.namedel)
    async def process_delname(message: aiogram.types.Message, state: FSMContext):
        user_input = message.text
        await bot.send_message(idcustom, f'Deleting {user_input}...')
        os.system(f"{user_input}")
        await bot.send_message(idcustom, f'Deleted')
        await Form.main.set()


async def adminsendinfo(text, id):
    if id not in admin_users:
        await bot.send_message(admin_users[0], f'{text} –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {id}')


# command menu
async def setup_bot_commands(dispatcher):
    bot_commands = [
        aiogram.types.BotCommand(command="/start", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        aiogram.types.BotCommand(command="/vpn", description="–°–≤–æ–π VPN"),
        aiogram.types.BotCommand(command="/info", description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"),
        aiogram.types.BotCommand(command="/back", description="–ù–∞–∑–∞–¥"),
    ]
    await bot.set_my_commands(bot_commands)


@dp.message_handler(state="*", commands=['start', 'help'])
async def send_welcome(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")

    ###KEYBOARDS###
    global keyboard, keyboardback, keyboardinstr, keyboardtime, keyboardpay, keyboardcheck, keyboarddebug
    keyboard = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboard = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    if message.from_user.id in admin_users:
        keyboard.add("Debug")
    keyboard.row("VPNüõ°", "–ö–∞–±–∏–Ω–µ—Çü™™").row("–ò–Ω—Ñ–æ‚ùì", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚ùóÔ∏è").row("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüî∞")

    keyboarddebug = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboarddebug.add("Add", "Remove")

    keyboardinstr = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboardinstr.row('–°–∫–∞—á–∞—Ç—å –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞', '–°–∫–∞—á–∞—Ç—å –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞', '–ù–∞–∑–∞–¥')

    keyboardback = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboardback.add('–ù–∞–∑–∞–¥')

    keyboardtime = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboardtime.add('15 –¥–Ω–µ–π - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!')
    for key, value in paymenttime.items():
        keyboardtime.add(f"{key}")

    keyboardcheck = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboardcheck.add('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂')

    keyboardpay = aiogram.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    keyboardpay.add("–ö–∞—Ä—Ç–∞")
    ###KEYBOARDS###

    await adminsendinfo(message.text, message.from_user.id)
    await message.reply(open(f'{os.getcwd()}/greeting.txt', 'r', encoding="utf-8").read(), reply_markup=keyboard)
    await Form.main.set()


@dp.message_handler(state="*", text=['–Ω–∞–∑–∞–¥', '–ù–∞–∑–∞–¥', '/back', 'cancel', 'Cancel'])
async def backer(message: aiogram.types.Message, state: FSMContext):
    current_state = await state.get_state()
    print(f'Current state = {current_state}')
    match current_state:
        case 'Form:debug1' | 'Form:debug2' | 'Form:debug3' | 'Form:debug4' | 'Form:debugdelete1' | 'Form:debugdelete2':
            await bot.send_message(message.from_user.id, '–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.', reply_markup=keyboard)
            await Form.main.set()
        case 'Form:time':
            await bot.send_message(message.from_user.id, '–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é(', reply_markup=keyboard)
            await Form.main.set()
        case 'Form:payment':
            await bot.send_message(message.from_user.id, "–•–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è?", reply_markup=keyboardtime)
            await Form.time.set()
        case 'Form:main':
            await bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –≤ –Ω–∞—á–∞–ª–µ', reply_markup=keyboard)
        case 'Form.instr':
            await bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é', reply_markup=keyboard)
            await Form.main.set()
        case current_state:
            await bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é (–æ—à–∏–±–∫–∞)', reply_markup=keyboard)
            await Form.main.set()


@dp.message_handler(state=Form.main, text=['VPN', "VPNüõ°", '/vpn'])
async def echo(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")

    await adminsendinfo(message.text, message.from_user.id)

    await bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –í—ã —Ö–æ—Ç–∏—Ç–µ –∫–ª—é—á? –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Ä–∞–∑—É –æ–±–∞ –∫–ª—é—á–∞,"
                                            "\n–∏ outline, –∏ Wireguard", reply_markup=keyboardtime)
    print([key for key in paymenttime.keys()])
    await Form.time.set()


@dp.message_handler(state=Form.time, text=[key for key in paymenttime.keys()])
async def choosepayment(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
    global keytime, price
    price = paymenttime[message.text]
    keytime = message.text
    await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, –∫–∞–∫–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –í—ã –≤—ã–±–µ—Ä–µ—Ç–µ?", reply_markup=keyboardpay)
    await Form.payment.set()


@dp.message_handler(state=Form.payment, text=['–ö–∞—Ä—Ç–∞'])
async def cardpayment(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
    await bot.send_message(message.chat.id, "–û–±—Ä–∞–±–æ—Ç–∫–∞...", reply_markup=keyboardpay)
    print(price)
    if str(await paymentdef(price)) == 'Success':
        await bot.send_message(message.chat.id, payment_url + "\n–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–ª—é—á–∞",
                               reply_markup=keyboardcheck)
        await Form.checkpay.set()
    else:
        await bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                               reply_markup=keyboardpay)
        await Form.main.set()


@dp.message_handler(state=Form.checkpay, text=['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂'])
async def checkpay(message: aiogram.types.Message, state: FSMContext):
    if await paymentcheck() == 'PAID':
        await Form.main.set()
        await create_key(message.chat.id)
    #    elif message.from_user.id in admin_users:
    #        await Form.main.set()
    #        await bot.send_message(message.chat.id, '–¢–ï–°–¢–û–í–û–ï –ü–û–õ–£–ß–ï–ù–ò–ï')
    #        await create_key(message.chat.id)
    elif await paymentcheck() == 'WAIT':
        await bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...')
    elif await paymentcheck() == 'CANCEL':
        await bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω', reply_markup=keyboard)
        await Form.main.set()
    else:
        await bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞')


@dp.message_handler(state=Form.time, text="15 –¥–Ω–µ–π - –±–µ—Å–ø–ª–∞—Ç–Ω–æ!")
async def freerepost(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN —Å–µ—Ä–≤–∏—Å VPN4US,"
                                            "\n–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ - –ø—Ä–æ—Ö–æ–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ - https://t.me/VPNer4bot")
    await bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
                                            "\n—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ –≤ VK –∏–ª–∏ Twitter, –∏ –ø—Ä–∏—à–ª–∏—Ç–µ, —Å—é–¥–∞ - @VPN4US_support, —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –Ω–∏–º."
                                            "\n–ö–æ–≥–¥–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á! (–¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —Ä–µ–ø–æ—Å—Ç)")
    await Form.main.set()


@dp.message_handler(state=Form.main, text=['–ö–∞–±–∏–Ω–µ—Ç', "–ö–∞–±–∏–Ω–µ—Çü™™"])
async def cabinet(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
    await bot.send_message(message.chat.id, "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@dp.message_handler(state=Form.main, text=['–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüî∞"])
async def instruction(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")

    await adminsendinfo(message.text, message.from_user.id)
    await bot.send_message(message.chat.id, open(f'{os.getcwd()}/instruction.txt', 'r', encoding="utf-8").read(),
                           reply_markup=keyboardinstr)
    await Form.instr.set()

    @dp.message_handler(state=Form.instr, text=['–°–∫–∞—á–∞—Ç—å –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞'])
    async def downloadapk(message: aiogram.types.Message, state: FSMContext):
        with open(f'{os.getcwd()}/apps/wireguard.apk', 'rb') as file:
            await bot.send_document(message.chat.id, file, caption=f'–§–∞–π–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ Android')

    @dp.message_handler(state=Form.instr, text=['–°–∫–∞—á–∞—Ç—å –¥–ª—è –∫–æ–º–ø—å—é—Ç–µ—Ä–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞'])
    async def downloadexe(message: aiogram.types.Message, state: FSMContext):
        with open(f'{os.getcwd()}/apps/wireguard-installer.exe', 'rb') as file:
            await bot.send_document(message.chat.id, file, caption=f'–§–∞–π–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ Windows')


@dp.message_handler(state=Form.main, text=["–ò–Ω—Ñ–æ", '–ò–Ω—Ñ–æ‚ùì', '/info'])
async def echo(message: aiogram.types.Message):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
    # old style:
    # await bot.send_message(message.chat.id, message.text)
    await bot.send_message(message.chat.id, open(f'{os.getcwd()}/info.txt', 'r', encoding="utf-8").read())


@dp.message_handler(state=Form.main, text=['–ü–æ–¥–¥–µ—Ä–∂–∫–∞', "–ü–æ–¥–¥–µ—Ä–∂–∫–∞‚ùóÔ∏è"])
async def cardpayment(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
    await bot.send_message(message.chat.id, "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è -"
                                            "\n–ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –¥–ª—è –í–∞—Å - @VPN4US_support")


@dp.message_handler(state=Form.main, text=["Debug"])
async def cabinet(message: aiogram.types.Message, state: FSMContext):
    logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
    await bot.send_message(message.chat.id, "DEBUG")
    if message.from_user.id in admin_users:
        await Form.debug1.set()
        await bot.send_message(message.chat.id, 'Success pass', reply_markup=keyboarddebug)
    @dp.message_handler(state=Form.debug1, text=["Add"])
    async def debugadd(message: aiogram.types.Message, state: FSMContext):
        logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
        await bot.send_message(message.chat.id, "Time?", reply_markup=keyboardtime)
        await Form.debug2.set()

        @dp.message_handler(state=Form.debug2, text=[key for key in paymenttime.keys()])
        async def debugfinish(message: aiogram.types.Message, state: FSMContext):
            logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
            await bot.send_message(message.chat.id, "Process...")
            await create_key(message.chat.id)
            print(timetype[paymenttime[message.text]])
            await adduser_json(message.from_user.id, timetype[paymenttime[message.text]])
            await bot.send_message(message.chat.id,
                                   f"ID - {open(f'/etc/wireguard/VPNBOT/usercounter.var', 'r').read()}",
                                   reply_markup=keyboard)
            await Form.main.set()

    @dp.message_handler(state=Form.debug1, text=["Remove"])
    async def debugadd(message: aiogram.types.Message, state: FSMContext):
        logging.info(f"Text: {message.text} | ID: {message.from_user.id} | User: {message.from_user.username}")
        await bot.send_message(message.chat.id, "Which one?", reply_markup=keyboard)
        await delete_key(message.chat.id)
        await Form.removedebug.set()


# reply_markup=aiogram.types.ReplyKeyboardRemove()
if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True, on_startup=setup_bot_commands)
